// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:hooyim/api/bean/comment_entity.dart';
import 'package:hooyim/generated/json/comment_entity_helper.dart';
import 'package:hooyim/api/bean/article_entity.dart';
import 'package:hooyim/generated/json/article_entity_helper.dart';
import 'package:hooyim/api/bean/article_detail_entity.dart';
import 'package:hooyim/generated/json/article_detail_entity_helper.dart';
import 'package:hooyim/api/bean/user_info_entity.dart';
import 'package:hooyim/generated/json/user_info_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case CommentEntity:
				return commentEntityFromJson(data as CommentEntity, json) as T;
			case CommentResult:
				return commentResultFromJson(data as CommentResult, json) as T;
			case CommentResultData:
				return commentResultDataFromJson(data as CommentResultData, json) as T;
			case CommentResultDataIpLocation:
				return commentResultDataIpLocationFromJson(data as CommentResultDataIpLocation, json) as T;
			case CommentResultDataAuthor:
				return commentResultDataAuthorFromJson(data as CommentResultDataAuthor, json) as T;
			case CommentResultParams:
				return commentResultParamsFromJson(data as CommentResultParams, json) as T;
			case CommentResultParamsQuerys:
				return commentResultParamsQuerysFromJson(data as CommentResultParamsQuerys, json) as T;
			case CommentResultParamsOptions:
				return commentResultParamsOptionsFromJson(data as CommentResultParamsOptions, json) as T;
			case CommentResultParamsOptionsSort:
				return commentResultParamsOptionsSortFromJson(data as CommentResultParamsOptionsSort, json) as T;
			case CommentResultParamsParams:
				return commentResultParamsParamsFromJson(data as CommentResultParamsParams, json) as T;
			case CommentResultPagination:
				return commentResultPaginationFromJson(data as CommentResultPagination, json) as T;
			case ArticleEntity:
				return articleEntityFromJson(data as ArticleEntity, json) as T;
			case ArticleResult:
				return articleResultFromJson(data as ArticleResult, json) as T;
			case ArticleResultData:
				return articleResultDataFromJson(data as ArticleResultData, json) as T;
			case ArticleResultDataTag:
				return articleResultDataTagFromJson(data as ArticleResultDataTag, json) as T;
			case ArticleResultDataTagExtend:
				return articleResultDataTagExtendFromJson(data as ArticleResultDataTagExtend, json) as T;
			case ArticleResultDataCategory:
				return articleResultDataCategoryFromJson(data as ArticleResultDataCategory, json) as T;
			case ArticleResultDataCategoryExtend:
				return articleResultDataCategoryExtendFromJson(data as ArticleResultDataCategoryExtend, json) as T;
			case ArticleResultDataMeta:
				return articleResultDataMetaFromJson(data as ArticleResultDataMeta, json) as T;
			case ArticleResultParams:
				return articleResultParamsFromJson(data as ArticleResultParams, json) as T;
			case ArticleResultParamsQuerys:
				return articleResultParamsQuerysFromJson(data as ArticleResultParamsQuerys, json) as T;
			case ArticleResultParamsOptions:
				return articleResultParamsOptionsFromJson(data as ArticleResultParamsOptions, json) as T;
			case ArticleResultParamsOptionsSort:
				return articleResultParamsOptionsSortFromJson(data as ArticleResultParamsOptionsSort, json) as T;
			case ArticleResultParamsParams:
				return articleResultParamsParamsFromJson(data as ArticleResultParamsParams, json) as T;
			case ArticleResultPagination:
				return articleResultPaginationFromJson(data as ArticleResultPagination, json) as T;
			case ArticleDetailEntity:
				return articleDetailEntityFromJson(data as ArticleDetailEntity, json) as T;
			case ArticleDetailResult:
				return articleDetailResultFromJson(data as ArticleDetailResult, json) as T;
			case ArticleDetailResultTag:
				return articleDetailResultTagFromJson(data as ArticleDetailResultTag, json) as T;
			case ArticleDetailResultTagExtend:
				return articleDetailResultTagExtendFromJson(data as ArticleDetailResultTagExtend, json) as T;
			case ArticleDetailResultCategory:
				return articleDetailResultCategoryFromJson(data as ArticleDetailResultCategory, json) as T;
			case ArticleDetailResultCategoryExtend:
				return articleDetailResultCategoryExtendFromJson(data as ArticleDetailResultCategoryExtend, json) as T;
			case ArticleDetailResultMeta:
				return articleDetailResultMetaFromJson(data as ArticleDetailResultMeta, json) as T;
			case ArticleDetailResultRelated:
				return articleDetailResultRelatedFromJson(data as ArticleDetailResultRelated, json) as T;
			case ArticleDetailResultRelatedMeta:
				return articleDetailResultRelatedMetaFromJson(data as ArticleDetailResultRelatedMeta, json) as T;
			case UserInfoEntity:
				return userInfoEntityFromJson(data as UserInfoEntity, json) as T;
			case UserInfoResult:
				return userInfoResultFromJson(data as UserInfoResult, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case CommentEntity:
				return commentEntityToJson(data as CommentEntity);
			case CommentResult:
				return commentResultToJson(data as CommentResult);
			case CommentResultData:
				return commentResultDataToJson(data as CommentResultData);
			case CommentResultDataIpLocation:
				return commentResultDataIpLocationToJson(data as CommentResultDataIpLocation);
			case CommentResultDataAuthor:
				return commentResultDataAuthorToJson(data as CommentResultDataAuthor);
			case CommentResultParams:
				return commentResultParamsToJson(data as CommentResultParams);
			case CommentResultParamsQuerys:
				return commentResultParamsQuerysToJson(data as CommentResultParamsQuerys);
			case CommentResultParamsOptions:
				return commentResultParamsOptionsToJson(data as CommentResultParamsOptions);
			case CommentResultParamsOptionsSort:
				return commentResultParamsOptionsSortToJson(data as CommentResultParamsOptionsSort);
			case CommentResultParamsParams:
				return commentResultParamsParamsToJson(data as CommentResultParamsParams);
			case CommentResultPagination:
				return commentResultPaginationToJson(data as CommentResultPagination);
			case ArticleEntity:
				return articleEntityToJson(data as ArticleEntity);
			case ArticleResult:
				return articleResultToJson(data as ArticleResult);
			case ArticleResultData:
				return articleResultDataToJson(data as ArticleResultData);
			case ArticleResultDataTag:
				return articleResultDataTagToJson(data as ArticleResultDataTag);
			case ArticleResultDataTagExtend:
				return articleResultDataTagExtendToJson(data as ArticleResultDataTagExtend);
			case ArticleResultDataCategory:
				return articleResultDataCategoryToJson(data as ArticleResultDataCategory);
			case ArticleResultDataCategoryExtend:
				return articleResultDataCategoryExtendToJson(data as ArticleResultDataCategoryExtend);
			case ArticleResultDataMeta:
				return articleResultDataMetaToJson(data as ArticleResultDataMeta);
			case ArticleResultParams:
				return articleResultParamsToJson(data as ArticleResultParams);
			case ArticleResultParamsQuerys:
				return articleResultParamsQuerysToJson(data as ArticleResultParamsQuerys);
			case ArticleResultParamsOptions:
				return articleResultParamsOptionsToJson(data as ArticleResultParamsOptions);
			case ArticleResultParamsOptionsSort:
				return articleResultParamsOptionsSortToJson(data as ArticleResultParamsOptionsSort);
			case ArticleResultParamsParams:
				return articleResultParamsParamsToJson(data as ArticleResultParamsParams);
			case ArticleResultPagination:
				return articleResultPaginationToJson(data as ArticleResultPagination);
			case ArticleDetailEntity:
				return articleDetailEntityToJson(data as ArticleDetailEntity);
			case ArticleDetailResult:
				return articleDetailResultToJson(data as ArticleDetailResult);
			case ArticleDetailResultTag:
				return articleDetailResultTagToJson(data as ArticleDetailResultTag);
			case ArticleDetailResultTagExtend:
				return articleDetailResultTagExtendToJson(data as ArticleDetailResultTagExtend);
			case ArticleDetailResultCategory:
				return articleDetailResultCategoryToJson(data as ArticleDetailResultCategory);
			case ArticleDetailResultCategoryExtend:
				return articleDetailResultCategoryExtendToJson(data as ArticleDetailResultCategoryExtend);
			case ArticleDetailResultMeta:
				return articleDetailResultMetaToJson(data as ArticleDetailResultMeta);
			case ArticleDetailResultRelated:
				return articleDetailResultRelatedToJson(data as ArticleDetailResultRelated);
			case ArticleDetailResultRelatedMeta:
				return articleDetailResultRelatedMetaToJson(data as ArticleDetailResultRelatedMeta);
			case UserInfoEntity:
				return userInfoEntityToJson(data as UserInfoEntity);
			case UserInfoResult:
				return userInfoResultToJson(data as UserInfoResult);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (CommentEntity).toString()){
			return CommentEntity().fromJson(json);
		}	else if(type == (CommentResult).toString()){
			return CommentResult().fromJson(json);
		}	else if(type == (CommentResultData).toString()){
			return CommentResultData().fromJson(json);
		}	else if(type == (CommentResultDataIpLocation).toString()){
			return CommentResultDataIpLocation().fromJson(json);
		}	else if(type == (CommentResultDataAuthor).toString()){
			return CommentResultDataAuthor().fromJson(json);
		}	else if(type == (CommentResultParams).toString()){
			return CommentResultParams().fromJson(json);
		}	else if(type == (CommentResultParamsQuerys).toString()){
			return CommentResultParamsQuerys().fromJson(json);
		}	else if(type == (CommentResultParamsOptions).toString()){
			return CommentResultParamsOptions().fromJson(json);
		}	else if(type == (CommentResultParamsOptionsSort).toString()){
			return CommentResultParamsOptionsSort().fromJson(json);
		}	else if(type == (CommentResultParamsParams).toString()){
			return CommentResultParamsParams().fromJson(json);
		}	else if(type == (CommentResultPagination).toString()){
			return CommentResultPagination().fromJson(json);
		}	else if(type == (ArticleEntity).toString()){
			return ArticleEntity().fromJson(json);
		}	else if(type == (ArticleResult).toString()){
			return ArticleResult().fromJson(json);
		}	else if(type == (ArticleResultData).toString()){
			return ArticleResultData().fromJson(json);
		}	else if(type == (ArticleResultDataTag).toString()){
			return ArticleResultDataTag().fromJson(json);
		}	else if(type == (ArticleResultDataTagExtend).toString()){
			return ArticleResultDataTagExtend().fromJson(json);
		}	else if(type == (ArticleResultDataCategory).toString()){
			return ArticleResultDataCategory().fromJson(json);
		}	else if(type == (ArticleResultDataCategoryExtend).toString()){
			return ArticleResultDataCategoryExtend().fromJson(json);
		}	else if(type == (ArticleResultDataMeta).toString()){
			return ArticleResultDataMeta().fromJson(json);
		}	else if(type == (ArticleResultParams).toString()){
			return ArticleResultParams().fromJson(json);
		}	else if(type == (ArticleResultParamsQuerys).toString()){
			return ArticleResultParamsQuerys().fromJson(json);
		}	else if(type == (ArticleResultParamsOptions).toString()){
			return ArticleResultParamsOptions().fromJson(json);
		}	else if(type == (ArticleResultParamsOptionsSort).toString()){
			return ArticleResultParamsOptionsSort().fromJson(json);
		}	else if(type == (ArticleResultParamsParams).toString()){
			return ArticleResultParamsParams().fromJson(json);
		}	else if(type == (ArticleResultPagination).toString()){
			return ArticleResultPagination().fromJson(json);
		}	else if(type == (ArticleDetailEntity).toString()){
			return ArticleDetailEntity().fromJson(json);
		}	else if(type == (ArticleDetailResult).toString()){
			return ArticleDetailResult().fromJson(json);
		}	else if(type == (ArticleDetailResultTag).toString()){
			return ArticleDetailResultTag().fromJson(json);
		}	else if(type == (ArticleDetailResultTagExtend).toString()){
			return ArticleDetailResultTagExtend().fromJson(json);
		}	else if(type == (ArticleDetailResultCategory).toString()){
			return ArticleDetailResultCategory().fromJson(json);
		}	else if(type == (ArticleDetailResultCategoryExtend).toString()){
			return ArticleDetailResultCategoryExtend().fromJson(json);
		}	else if(type == (ArticleDetailResultMeta).toString()){
			return ArticleDetailResultMeta().fromJson(json);
		}	else if(type == (ArticleDetailResultRelated).toString()){
			return ArticleDetailResultRelated().fromJson(json);
		}	else if(type == (ArticleDetailResultRelatedMeta).toString()){
			return ArticleDetailResultRelatedMeta().fromJson(json);
		}	else if(type == (UserInfoEntity).toString()){
			return UserInfoEntity().fromJson(json);
		}	else if(type == (UserInfoResult).toString()){
			return UserInfoResult().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<CommentEntity>[] is M){
			return data.map<CommentEntity>((e) => CommentEntity().fromJson(e)).toList() as M;
		}	else if(<CommentResult>[] is M){
			return data.map<CommentResult>((e) => CommentResult().fromJson(e)).toList() as M;
		}	else if(<CommentResultData>[] is M){
			return data.map<CommentResultData>((e) => CommentResultData().fromJson(e)).toList() as M;
		}	else if(<CommentResultDataIpLocation>[] is M){
			return data.map<CommentResultDataIpLocation>((e) => CommentResultDataIpLocation().fromJson(e)).toList() as M;
		}	else if(<CommentResultDataAuthor>[] is M){
			return data.map<CommentResultDataAuthor>((e) => CommentResultDataAuthor().fromJson(e)).toList() as M;
		}	else if(<CommentResultParams>[] is M){
			return data.map<CommentResultParams>((e) => CommentResultParams().fromJson(e)).toList() as M;
		}	else if(<CommentResultParamsQuerys>[] is M){
			return data.map<CommentResultParamsQuerys>((e) => CommentResultParamsQuerys().fromJson(e)).toList() as M;
		}	else if(<CommentResultParamsOptions>[] is M){
			return data.map<CommentResultParamsOptions>((e) => CommentResultParamsOptions().fromJson(e)).toList() as M;
		}	else if(<CommentResultParamsOptionsSort>[] is M){
			return data.map<CommentResultParamsOptionsSort>((e) => CommentResultParamsOptionsSort().fromJson(e)).toList() as M;
		}	else if(<CommentResultParamsParams>[] is M){
			return data.map<CommentResultParamsParams>((e) => CommentResultParamsParams().fromJson(e)).toList() as M;
		}	else if(<CommentResultPagination>[] is M){
			return data.map<CommentResultPagination>((e) => CommentResultPagination().fromJson(e)).toList() as M;
		}	else if(<ArticleEntity>[] is M){
			return data.map<ArticleEntity>((e) => ArticleEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleResult>[] is M){
			return data.map<ArticleResult>((e) => ArticleResult().fromJson(e)).toList() as M;
		}	else if(<ArticleResultData>[] is M){
			return data.map<ArticleResultData>((e) => ArticleResultData().fromJson(e)).toList() as M;
		}	else if(<ArticleResultDataTag>[] is M){
			return data.map<ArticleResultDataTag>((e) => ArticleResultDataTag().fromJson(e)).toList() as M;
		}	else if(<ArticleResultDataTagExtend>[] is M){
			return data.map<ArticleResultDataTagExtend>((e) => ArticleResultDataTagExtend().fromJson(e)).toList() as M;
		}	else if(<ArticleResultDataCategory>[] is M){
			return data.map<ArticleResultDataCategory>((e) => ArticleResultDataCategory().fromJson(e)).toList() as M;
		}	else if(<ArticleResultDataCategoryExtend>[] is M){
			return data.map<ArticleResultDataCategoryExtend>((e) => ArticleResultDataCategoryExtend().fromJson(e)).toList() as M;
		}	else if(<ArticleResultDataMeta>[] is M){
			return data.map<ArticleResultDataMeta>((e) => ArticleResultDataMeta().fromJson(e)).toList() as M;
		}	else if(<ArticleResultParams>[] is M){
			return data.map<ArticleResultParams>((e) => ArticleResultParams().fromJson(e)).toList() as M;
		}	else if(<ArticleResultParamsQuerys>[] is M){
			return data.map<ArticleResultParamsQuerys>((e) => ArticleResultParamsQuerys().fromJson(e)).toList() as M;
		}	else if(<ArticleResultParamsOptions>[] is M){
			return data.map<ArticleResultParamsOptions>((e) => ArticleResultParamsOptions().fromJson(e)).toList() as M;
		}	else if(<ArticleResultParamsOptionsSort>[] is M){
			return data.map<ArticleResultParamsOptionsSort>((e) => ArticleResultParamsOptionsSort().fromJson(e)).toList() as M;
		}	else if(<ArticleResultParamsParams>[] is M){
			return data.map<ArticleResultParamsParams>((e) => ArticleResultParamsParams().fromJson(e)).toList() as M;
		}	else if(<ArticleResultPagination>[] is M){
			return data.map<ArticleResultPagination>((e) => ArticleResultPagination().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailEntity>[] is M){
			return data.map<ArticleDetailEntity>((e) => ArticleDetailEntity().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResult>[] is M){
			return data.map<ArticleDetailResult>((e) => ArticleDetailResult().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultTag>[] is M){
			return data.map<ArticleDetailResultTag>((e) => ArticleDetailResultTag().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultTagExtend>[] is M){
			return data.map<ArticleDetailResultTagExtend>((e) => ArticleDetailResultTagExtend().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultCategory>[] is M){
			return data.map<ArticleDetailResultCategory>((e) => ArticleDetailResultCategory().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultCategoryExtend>[] is M){
			return data.map<ArticleDetailResultCategoryExtend>((e) => ArticleDetailResultCategoryExtend().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultMeta>[] is M){
			return data.map<ArticleDetailResultMeta>((e) => ArticleDetailResultMeta().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultRelated>[] is M){
			return data.map<ArticleDetailResultRelated>((e) => ArticleDetailResultRelated().fromJson(e)).toList() as M;
		}	else if(<ArticleDetailResultRelatedMeta>[] is M){
			return data.map<ArticleDetailResultRelatedMeta>((e) => ArticleDetailResultRelatedMeta().fromJson(e)).toList() as M;
		}	else if(<UserInfoEntity>[] is M){
			return data.map<UserInfoEntity>((e) => UserInfoEntity().fromJson(e)).toList() as M;
		}	else if(<UserInfoResult>[] is M){
			return data.map<UserInfoResult>((e) => UserInfoResult().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}